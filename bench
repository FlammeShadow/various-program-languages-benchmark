#!/usr/bin/env bash

help="$0 [impl...] [options]

options:
  --list list all available implementations
"

if [[ $1 == "" ]]
  then echo "$help"
  exit
fi

if [[ $1 == "--list" ]]
  then echo "Available implementations:"
  for impl in "$(find "./language-environments" | grep "flake.nix$")"
  do
    impl="${impl//"./language-environments/"/""}"
    impl="${impl//"/flake.nix"/""}"
    echo "$impl"
  done
  exit
fi

if [[ $1 == "all" ]]
  then echo "Running benchmark for all implementations"
  for impl in "$(find "./language-environments" | grep "flake.nix$")"
  do
    impl="${impl//"./language-environments/"/""}"
    impl="${impl//"/flake.nix"/""}"
    bash $0 $impl
  done
  exit
fi

function setup_bench {
  if [[ -f "./language-environments/$1/flake.nix" ]];
    then echo "Running benchmark for implementation: $1"
    export OUTPUT_PATH="./output/once-time/${1//\//-}"
    if [[ -d "./output/once-time" ]]
      then echo ""
    else mkdir "./output/once-time";
    fi
    run_bench $1
    
  else
    echo "Implementation not found: $1"
  fi
}

function run_bench {
  impl=$1
  if [[ $impl == "scheme/guile" ]];
    then bash ./shellHook.sh "guile" ".scm" "--auto-compile -s"
  elif [[ $impl == "scheme/chezscheme" ]];
    then bash ./shellHook.sh "scheme" ".scm" "--optimize-level 3 --script"
  elif [[ $impl == "javascript/bun" ]];
    then bash ./shellHook.sh "bun run" ".js"
  elif [[ $impl == "javascript/node" ]];
    then bash ./shellHook.sh "node" ".js"
  elif [[ $impl == "javascript/quickjs" ]];
    then bash ./shellHook.sh "qjs" ".js"
  elif [[ $impl == "python/cpython3.13" ]];
    then bash ./shellHook.sh "py" ".py" "-3.13"
  elif [[ $impl == "python/pypy" ]];
    then bash ./shellHook.sh "pypy" ".py"
  elif [[ $impl == "python/3.9" ]];
    then bash ./shellHook.sh "py" ".py" "-3.9"
  fi
}

for arg in "$@"; do
  if [[ $arg == "all" ]]
    then continue;
  fi
  if [[ $arg == -* ]]
    then continue
  fi
  setup_bench $arg
done
